//--------------------------------------------------------------------------------
// Auto-generated by Migen (ea1eefe) & LiteX (05869be) on 2020-05-09 01:26:29
//--------------------------------------------------------------------------------
#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#ifdef CSR_ACCESSORS_DEFINED
extern void csr_write_simple(unsigned long v, unsigned long a);
extern unsigned long csr_read_simple(unsigned long a);
#else /* ! CSR_ACCESSORS_DEFINED */
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */

/* timer0 */
#define CSR_TIMER0_BASE 0x82001800L
#define CSR_TIMER0_LOAD_ADDR 0x82001800L
#define CSR_TIMER0_LOAD_SIZE 1
static inline uint32_t timer0_load_read(void) {
	return csr_read_simple(0x82001800L);
}
static inline void timer0_load_write(uint32_t v) {
	csr_write_simple(v, 0x82001800L);
}
#define CSR_TIMER0_RELOAD_ADDR 0x82001804L
#define CSR_TIMER0_RELOAD_SIZE 1
static inline uint32_t timer0_reload_read(void) {
	return csr_read_simple(0x82001804L);
}
static inline void timer0_reload_write(uint32_t v) {
	csr_write_simple(v, 0x82001804L);
}
#define CSR_TIMER0_EN_ADDR 0x82001808L
#define CSR_TIMER0_EN_SIZE 1
static inline uint32_t timer0_en_read(void) {
	return csr_read_simple(0x82001808L);
}
static inline void timer0_en_write(uint32_t v) {
	csr_write_simple(v, 0x82001808L);
}
#define CSR_TIMER0_UPDATE_VALUE_ADDR 0x8200180cL
#define CSR_TIMER0_UPDATE_VALUE_SIZE 1
static inline uint32_t timer0_update_value_read(void) {
	return csr_read_simple(0x8200180cL);
}
static inline void timer0_update_value_write(uint32_t v) {
	csr_write_simple(v, 0x8200180cL);
}
#define CSR_TIMER0_VALUE_ADDR 0x82001810L
#define CSR_TIMER0_VALUE_SIZE 1
static inline uint32_t timer0_value_read(void) {
	return csr_read_simple(0x82001810L);
}
#define CSR_TIMER0_EV_STATUS_ADDR 0x82001814L
#define CSR_TIMER0_EV_STATUS_SIZE 1
static inline uint32_t timer0_ev_status_read(void) {
	return csr_read_simple(0x82001814L);
}
static inline void timer0_ev_status_write(uint32_t v) {
	csr_write_simple(v, 0x82001814L);
}
#define CSR_TIMER0_EV_PENDING_ADDR 0x82001818L
#define CSR_TIMER0_EV_PENDING_SIZE 1
static inline uint32_t timer0_ev_pending_read(void) {
	return csr_read_simple(0x82001818L);
}
static inline void timer0_ev_pending_write(uint32_t v) {
	csr_write_simple(v, 0x82001818L);
}
#define CSR_TIMER0_EV_ENABLE_ADDR 0x8200181cL
#define CSR_TIMER0_EV_ENABLE_SIZE 1
static inline uint32_t timer0_ev_enable_read(void) {
	return csr_read_simple(0x8200181cL);
}
static inline void timer0_ev_enable_write(uint32_t v) {
	csr_write_simple(v, 0x8200181cL);
}

/* identifier_mem */
#define CSR_IDENTIFIER_MEM_BASE 0x82001000L

/* ctrl */
#define CSR_CTRL_BASE 0x82000000L
#define CSR_CTRL_RESET_ADDR 0x82000000L
#define CSR_CTRL_RESET_SIZE 1
static inline uint32_t ctrl_reset_read(void) {
	return csr_read_simple(0x82000000L);
}
static inline void ctrl_reset_write(uint32_t v) {
	csr_write_simple(v, 0x82000000L);
}
#define CSR_CTRL_SCRATCH_ADDR 0x82000004L
#define CSR_CTRL_SCRATCH_SIZE 1
static inline uint32_t ctrl_scratch_read(void) {
	return csr_read_simple(0x82000004L);
}
static inline void ctrl_scratch_write(uint32_t v) {
	csr_write_simple(v, 0x82000004L);
}
#define CSR_CTRL_BUS_ERRORS_ADDR 0x82000008L
#define CSR_CTRL_BUS_ERRORS_SIZE 1
static inline uint32_t ctrl_bus_errors_read(void) {
	return csr_read_simple(0x82000008L);
}

/* led_example */
#define CSR_LED_EXAMPLE_BASE 0x82002000L
#define CSR_LED_EXAMPLE_LED_ADDR 0x82002000L
#define CSR_LED_EXAMPLE_LED_SIZE 1
static inline uint32_t led_example_led_read(void) {
	return csr_read_simple(0x82002000L);
}
static inline void led_example_led_write(uint32_t v) {
	csr_write_simple(v, 0x82002000L);
}
#define CSR_LED_EXAMPLE_LED_LEDSTATE_OFFSET 0
#define CSR_LED_EXAMPLE_LED_LEDSTATE_SIZE 1
#define CSR_LED_EXAMPLE_LED_LEDPULSE_OFFSET 1
#define CSR_LED_EXAMPLE_LED_LEDPULSE_SIZE 1

#endif
