//--------------------------------------------------------------------------------
// Auto-generated by Migen (ea1eefe) & LiteX (05869be) on 2020-05-09 00:35:02
//--------------------------------------------------------------------------------
module top(
	input wire clk100,
	input wire clkslow,
	input wire button,
	output reg led
);

wire sys_clk;
reg sys_rst = 1'd0;
wire slow_clk;
reg slow_rst = 1'd0;
wire button_1;
reg buttonpress = 1'd0;
reg [8:0] counter = 9'd400;
reg state = 1'd0;
reg next_state = 1'd0;
reg buttonpress_next_value0 = 1'd0;
reg buttonpress_next_value_ce0 = 1'd0;
reg [8:0] counter_next_value1 = 9'd0;
reg counter_next_value_ce1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg regs1 = 1'd0;

assign sys_clk = clk100;
assign slow_clk = clkslow;
always @(*) begin
	next_state <= 1'd0;
	buttonpress_next_value0 <= 1'd0;
	buttonpress_next_value_ce0 <= 1'd0;
	counter_next_value1 <= 9'd0;
	counter_next_value_ce1 <= 1'd0;
	next_state <= state;
	case (state)
		1'd1: begin
			counter_next_value1 <= (counter - 1'd1);
			counter_next_value_ce1 <= 1'd1;
			if ((counter == 1'd0)) begin
				buttonpress_next_value0 <= 1'd1;
				buttonpress_next_value_ce0 <= 1'd1;
				next_state <= 1'd0;
			end
			if ((~button_1)) begin
				next_state <= 1'd0;
			end
		end
		default: begin
			buttonpress_next_value0 <= 1'd0;
			buttonpress_next_value_ce0 <= 1'd1;
			if (button_1) begin
				next_state <= 1'd1;
				counter_next_value1 <= 9'd400;
				counter_next_value_ce1 <= 1'd1;
			end
		end
	endcase
end
assign button_1 = regs1;

always @(posedge slow_clk) begin
	state <= next_state;
	if (buttonpress_next_value_ce0) begin
		buttonpress <= buttonpress_next_value0;
	end
	if (counter_next_value_ce1) begin
		counter <= counter_next_value1;
	end
	if (slow_rst) begin
		buttonpress <= 1'd0;
		counter <= 9'd400;
		state <= 1'd0;
	end
	regs0 <= button;
	regs1 <= regs0;
end

always @(posedge sys_clk) begin
	led <= buttonpress;
	if (sys_rst) begin
		led <= 1'd0;
	end
end

endmodule
