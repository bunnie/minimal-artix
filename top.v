//--------------------------------------------------------------------------------
// Auto-generated by Migen (ea1eefe) & LiteX (05869be) on 2020-05-09 01:26:29
//--------------------------------------------------------------------------------
module top(
	input wire clk12,
	output wire led
);

reg soccontroller_reset_storage = 1'd0;
reg soccontroller_reset_re = 1'd0;
reg [31:0] soccontroller_scratch_storage = 32'd305419896;
reg soccontroller_scratch_re = 1'd0;
wire [31:0] soccontroller_bus_errors_status;
wire soccontroller_bus_errors_we;
wire soccontroller_reset;
wire soccontroller_bus_error;
reg [31:0] soccontroller_bus_errors = 32'd0;
wire cpu_reset;
wire [31:0] cpu_interrupt;
wire [29:0] cpu_ibus_adr;
wire [31:0] cpu_ibus_dat_w;
wire [31:0] cpu_ibus_dat_r;
wire [3:0] cpu_ibus_sel;
wire cpu_ibus_cyc;
wire cpu_ibus_stb;
wire cpu_ibus_ack;
wire cpu_ibus_we;
wire [2:0] cpu_ibus_cti;
wire [1:0] cpu_ibus_bte;
wire cpu_ibus_err;
wire [29:0] cpu_dbus_adr;
wire [31:0] cpu_dbus_dat_w;
wire [31:0] cpu_dbus_dat_r;
wire [3:0] cpu_dbus_sel;
wire cpu_dbus_cyc;
wire cpu_dbus_stb;
wire cpu_dbus_ack;
wire cpu_dbus_we;
wire [2:0] cpu_dbus_cti;
wire [1:0] cpu_dbus_bte;
wire cpu_dbus_err;
reg [31:0] vexriscv = 32'd0;
wire [29:0] blink_ram_bus_adr;
wire [31:0] blink_ram_bus_dat_w;
wire [31:0] blink_ram_bus_dat_r;
wire [3:0] blink_ram_bus_sel;
wire blink_ram_bus_cyc;
wire blink_ram_bus_stb;
reg blink_ram_bus_ack = 1'd0;
wire blink_ram_bus_we;
wire [2:0] blink_ram_bus_cti;
wire [1:0] blink_ram_bus_bte;
reg blink_ram_bus_err = 1'd0;
wire [12:0] blink_adr;
wire [31:0] blink_dat_r;
wire [29:0] ram_bus_ram_bus_adr;
wire [31:0] ram_bus_ram_bus_dat_w;
wire [31:0] ram_bus_ram_bus_dat_r;
wire [3:0] ram_bus_ram_bus_sel;
wire ram_bus_ram_bus_cyc;
wire ram_bus_ram_bus_stb;
reg ram_bus_ram_bus_ack = 1'd0;
wire ram_bus_ram_bus_we;
wire [2:0] ram_bus_ram_bus_cti;
wire [1:0] ram_bus_ram_bus_bte;
reg ram_bus_ram_bus_err = 1'd0;
wire [9:0] ram_adr;
wire [31:0] ram_dat_r;
reg [3:0] ram_we = 4'd0;
wire [31:0] ram_dat_w;
reg [31:0] load_storage = 32'd0;
reg load_re = 1'd0;
reg [31:0] reload_storage = 32'd0;
reg reload_re = 1'd0;
reg en_storage = 1'd0;
reg en_re = 1'd0;
reg update_value_storage = 1'd0;
reg update_value_re = 1'd0;
reg [31:0] value_status = 32'd0;
wire value_we;
wire irq;
wire zero_status;
reg zero_pending = 1'd0;
wire zero_trigger;
reg zero_clear = 1'd0;
reg zero_old_trigger = 1'd0;
wire eventmanager_status_re;
wire eventmanager_status_r;
wire eventmanager_status_we;
wire eventmanager_status_w;
wire eventmanager_pending_re;
wire eventmanager_pending_r;
wire eventmanager_pending_we;
wire eventmanager_pending_w;
reg eventmanager_storage = 1'd0;
reg eventmanager_re = 1'd0;
reg [31:0] value = 32'd0;
reg [13:0] interface_adr = 14'd0;
reg interface_we = 1'd0;
wire [31:0] interface_dat_w;
wire [31:0] interface_dat_r;
wire [29:0] bus_wishbone_adr;
wire [31:0] bus_wishbone_dat_w;
wire [31:0] bus_wishbone_dat_r;
wire [3:0] bus_wishbone_sel;
wire bus_wishbone_cyc;
wire bus_wishbone_stb;
reg bus_wishbone_ack = 1'd0;
wire bus_wishbone_we;
wire [2:0] bus_wishbone_cti;
wire [1:0] bus_wishbone_bte;
reg bus_wishbone_err = 1'd0;
wire clk12_bufg;
reg reset = 1'd0;
wire locked;
wire clkin;
wire sys_clk;
wire sys_rst;
wire clkout;
wire clkout_buf;
wire ledstate;
reg ledpulse = 1'd0;
reg [1:0] storage = 2'd1;
reg re = 1'd0;
reg state = 1'd0;
reg next_state = 1'd0;
wire mmcm_fb;
wire [29:0] shared_adr;
wire [31:0] shared_dat_w;
reg [31:0] shared_dat_r = 32'd0;
wire [3:0] shared_sel;
wire shared_cyc;
wire shared_stb;
reg shared_ack = 1'd0;
wire shared_we;
wire [2:0] shared_cti;
wire [1:0] shared_bte;
wire shared_err;
wire [1:0] request;
reg grant = 1'd0;
reg [2:0] slave_sel = 3'd0;
reg [2:0] slave_sel_r = 3'd0;
reg error = 1'd0;
wire wait_1;
wire done;
reg [19:0] count = 20'd1000000;
wire [13:0] csr_bankarray_interface0_bank_bus_adr;
wire csr_bankarray_interface0_bank_bus_we;
wire [31:0] csr_bankarray_interface0_bank_bus_dat_w;
reg [31:0] csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
wire csr_bankarray_csrbank0_reset0_re;
wire csr_bankarray_csrbank0_reset0_r;
wire csr_bankarray_csrbank0_reset0_we;
wire csr_bankarray_csrbank0_reset0_w;
wire csr_bankarray_csrbank0_scratch0_re;
wire [31:0] csr_bankarray_csrbank0_scratch0_r;
wire csr_bankarray_csrbank0_scratch0_we;
wire [31:0] csr_bankarray_csrbank0_scratch0_w;
wire csr_bankarray_csrbank0_bus_errors_re;
wire [31:0] csr_bankarray_csrbank0_bus_errors_r;
wire csr_bankarray_csrbank0_bus_errors_we;
wire [31:0] csr_bankarray_csrbank0_bus_errors_w;
wire csr_bankarray_csrbank0_sel;
wire [13:0] csr_bankarray_sram_bus_adr;
wire csr_bankarray_sram_bus_we;
wire [31:0] csr_bankarray_sram_bus_dat_w;
reg [31:0] csr_bankarray_sram_bus_dat_r = 32'd0;
wire [4:0] csr_bankarray_adr;
wire [7:0] csr_bankarray_dat_r;
wire csr_bankarray_sel;
reg csr_bankarray_sel_r = 1'd0;
wire [13:0] csr_bankarray_interface1_bank_bus_adr;
wire csr_bankarray_interface1_bank_bus_we;
wire [31:0] csr_bankarray_interface1_bank_bus_dat_w;
reg [31:0] csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
wire csr_bankarray_csrbank1_led0_re;
wire [1:0] csr_bankarray_csrbank1_led0_r;
wire csr_bankarray_csrbank1_led0_we;
wire [1:0] csr_bankarray_csrbank1_led0_w;
wire csr_bankarray_csrbank1_sel;
wire [13:0] csr_bankarray_interface2_bank_bus_adr;
wire csr_bankarray_interface2_bank_bus_we;
wire [31:0] csr_bankarray_interface2_bank_bus_dat_w;
reg [31:0] csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
wire csr_bankarray_csrbank2_load0_re;
wire [31:0] csr_bankarray_csrbank2_load0_r;
wire csr_bankarray_csrbank2_load0_we;
wire [31:0] csr_bankarray_csrbank2_load0_w;
wire csr_bankarray_csrbank2_reload0_re;
wire [31:0] csr_bankarray_csrbank2_reload0_r;
wire csr_bankarray_csrbank2_reload0_we;
wire [31:0] csr_bankarray_csrbank2_reload0_w;
wire csr_bankarray_csrbank2_en0_re;
wire csr_bankarray_csrbank2_en0_r;
wire csr_bankarray_csrbank2_en0_we;
wire csr_bankarray_csrbank2_en0_w;
wire csr_bankarray_csrbank2_update_value0_re;
wire csr_bankarray_csrbank2_update_value0_r;
wire csr_bankarray_csrbank2_update_value0_we;
wire csr_bankarray_csrbank2_update_value0_w;
wire csr_bankarray_csrbank2_value_re;
wire [31:0] csr_bankarray_csrbank2_value_r;
wire csr_bankarray_csrbank2_value_we;
wire [31:0] csr_bankarray_csrbank2_value_w;
wire csr_bankarray_csrbank2_ev_enable0_re;
wire csr_bankarray_csrbank2_ev_enable0_r;
wire csr_bankarray_csrbank2_ev_enable0_we;
wire csr_bankarray_csrbank2_ev_enable0_w;
wire csr_bankarray_csrbank2_sel;
wire [13:0] csr_interconnect_adr;
wire csr_interconnect_we;
wire [31:0] csr_interconnect_dat_w;
wire [31:0] csr_interconnect_dat_r;
reg [29:0] array_muxed0 = 30'd0;
reg [31:0] array_muxed1 = 32'd0;
reg [3:0] array_muxed2 = 4'd0;
reg array_muxed3 = 1'd0;
reg array_muxed4 = 1'd0;
reg array_muxed5 = 1'd0;
reg [2:0] array_muxed6 = 3'd0;
reg [1:0] array_muxed7 = 2'd0;
wire xilinxasyncresetsynchronizerimpl;
wire xilinxasyncresetsynchronizerimpl_rst_meta;

assign cpu_reset = soccontroller_reset;
assign soccontroller_bus_error = error;
assign cpu_interrupt[0] = irq;
assign soccontroller_reset = soccontroller_reset_re;
assign soccontroller_bus_errors_status = soccontroller_bus_errors;
assign blink_adr = blink_ram_bus_adr[12:0];
assign blink_ram_bus_dat_r = blink_dat_r;
always @(*) begin
	ram_we <= 4'd0;
	ram_we[0] <= (((ram_bus_ram_bus_cyc & ram_bus_ram_bus_stb) & ram_bus_ram_bus_we) & ram_bus_ram_bus_sel[0]);
	ram_we[1] <= (((ram_bus_ram_bus_cyc & ram_bus_ram_bus_stb) & ram_bus_ram_bus_we) & ram_bus_ram_bus_sel[1]);
	ram_we[2] <= (((ram_bus_ram_bus_cyc & ram_bus_ram_bus_stb) & ram_bus_ram_bus_we) & ram_bus_ram_bus_sel[2]);
	ram_we[3] <= (((ram_bus_ram_bus_cyc & ram_bus_ram_bus_stb) & ram_bus_ram_bus_we) & ram_bus_ram_bus_sel[3]);
end
assign ram_adr = ram_bus_ram_bus_adr[9:0];
assign ram_bus_ram_bus_dat_r = ram_dat_r;
assign ram_dat_w = ram_bus_ram_bus_dat_w;
assign zero_trigger = (value != 1'd0);
assign eventmanager_status_w = zero_status;
always @(*) begin
	zero_clear <= 1'd0;
	if ((eventmanager_pending_re & eventmanager_pending_r)) begin
		zero_clear <= 1'd1;
	end
end
assign eventmanager_pending_w = zero_pending;
assign irq = (eventmanager_pending_w & eventmanager_storage);
assign zero_status = zero_trigger;
assign interface_dat_w = bus_wishbone_dat_w;
assign bus_wishbone_dat_r = interface_dat_r;
always @(*) begin
	interface_adr <= 14'd0;
	interface_we <= 1'd0;
	bus_wishbone_ack <= 1'd0;
	next_state <= 1'd0;
	next_state <= state;
	case (state)
		1'd1: begin
			bus_wishbone_ack <= 1'd1;
			next_state <= 1'd0;
		end
		default: begin
			if ((bus_wishbone_cyc & bus_wishbone_stb)) begin
				interface_adr <= bus_wishbone_adr;
				interface_we <= bus_wishbone_we;
				next_state <= 1'd1;
			end
		end
	endcase
end
assign clkin = clk12_bufg;
assign sys_clk = clkout_buf;
assign led = (ledstate | ledpulse);
assign shared_adr = array_muxed0;
assign shared_dat_w = array_muxed1;
assign shared_sel = array_muxed2;
assign shared_cyc = array_muxed3;
assign shared_stb = array_muxed4;
assign shared_we = array_muxed5;
assign shared_cti = array_muxed6;
assign shared_bte = array_muxed7;
assign cpu_ibus_dat_r = shared_dat_r;
assign cpu_dbus_dat_r = shared_dat_r;
assign cpu_ibus_ack = (shared_ack & (grant == 1'd0));
assign cpu_dbus_ack = (shared_ack & (grant == 1'd1));
assign cpu_ibus_err = (shared_err & (grant == 1'd0));
assign cpu_dbus_err = (shared_err & (grant == 1'd1));
assign request = {cpu_dbus_cyc, cpu_ibus_cyc};
always @(*) begin
	slave_sel <= 3'd0;
	slave_sel[0] <= (shared_adr[29:14] == 16'd33280);
	slave_sel[1] <= (shared_adr[29:10] == 13'd4096);
	slave_sel[2] <= (shared_adr[29:13] == 1'd0);
end
assign bus_wishbone_adr = shared_adr;
assign bus_wishbone_dat_w = shared_dat_w;
assign bus_wishbone_sel = shared_sel;
assign bus_wishbone_stb = shared_stb;
assign bus_wishbone_we = shared_we;
assign bus_wishbone_cti = shared_cti;
assign bus_wishbone_bte = shared_bte;
assign ram_bus_ram_bus_adr = shared_adr;
assign ram_bus_ram_bus_dat_w = shared_dat_w;
assign ram_bus_ram_bus_sel = shared_sel;
assign ram_bus_ram_bus_stb = shared_stb;
assign ram_bus_ram_bus_we = shared_we;
assign ram_bus_ram_bus_cti = shared_cti;
assign ram_bus_ram_bus_bte = shared_bte;
assign blink_ram_bus_adr = shared_adr;
assign blink_ram_bus_dat_w = shared_dat_w;
assign blink_ram_bus_sel = shared_sel;
assign blink_ram_bus_stb = shared_stb;
assign blink_ram_bus_we = shared_we;
assign blink_ram_bus_cti = shared_cti;
assign blink_ram_bus_bte = shared_bte;
assign bus_wishbone_cyc = (shared_cyc & slave_sel[0]);
assign ram_bus_ram_bus_cyc = (shared_cyc & slave_sel[1]);
assign blink_ram_bus_cyc = (shared_cyc & slave_sel[2]);
assign shared_err = ((bus_wishbone_err | ram_bus_ram_bus_err) | blink_ram_bus_err);
assign wait_1 = ((shared_stb & shared_cyc) & (~shared_ack));
always @(*) begin
	shared_dat_r <= 32'd0;
	error <= 1'd0;
	shared_ack <= 1'd0;
	shared_ack <= ((bus_wishbone_ack | ram_bus_ram_bus_ack) | blink_ram_bus_ack);
	shared_dat_r <= ((({32{slave_sel_r[0]}} & bus_wishbone_dat_r) | ({32{slave_sel_r[1]}} & ram_bus_ram_bus_dat_r)) | ({32{slave_sel_r[2]}} & blink_ram_bus_dat_r));
	if (done) begin
		shared_dat_r <= 32'd4294967295;
		shared_ack <= 1'd1;
		error <= 1'd1;
	end
end
assign done = (count == 1'd0);
assign csr_bankarray_csrbank0_sel = (csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign csr_bankarray_csrbank0_reset0_r = csr_bankarray_interface0_bank_bus_dat_w[0];
assign csr_bankarray_csrbank0_reset0_re = ((csr_bankarray_csrbank0_sel & csr_bankarray_interface0_bank_bus_we) & (csr_bankarray_interface0_bank_bus_adr[1:0] == 1'd0));
assign csr_bankarray_csrbank0_reset0_we = ((csr_bankarray_csrbank0_sel & (~csr_bankarray_interface0_bank_bus_we)) & (csr_bankarray_interface0_bank_bus_adr[1:0] == 1'd0));
assign csr_bankarray_csrbank0_scratch0_r = csr_bankarray_interface0_bank_bus_dat_w[31:0];
assign csr_bankarray_csrbank0_scratch0_re = ((csr_bankarray_csrbank0_sel & csr_bankarray_interface0_bank_bus_we) & (csr_bankarray_interface0_bank_bus_adr[1:0] == 1'd1));
assign csr_bankarray_csrbank0_scratch0_we = ((csr_bankarray_csrbank0_sel & (~csr_bankarray_interface0_bank_bus_we)) & (csr_bankarray_interface0_bank_bus_adr[1:0] == 1'd1));
assign csr_bankarray_csrbank0_bus_errors_r = csr_bankarray_interface0_bank_bus_dat_w[31:0];
assign csr_bankarray_csrbank0_bus_errors_re = ((csr_bankarray_csrbank0_sel & csr_bankarray_interface0_bank_bus_we) & (csr_bankarray_interface0_bank_bus_adr[1:0] == 2'd2));
assign csr_bankarray_csrbank0_bus_errors_we = ((csr_bankarray_csrbank0_sel & (~csr_bankarray_interface0_bank_bus_we)) & (csr_bankarray_interface0_bank_bus_adr[1:0] == 2'd2));
assign csr_bankarray_csrbank0_reset0_w = soccontroller_reset_storage;
assign csr_bankarray_csrbank0_scratch0_w = soccontroller_scratch_storage[31:0];
assign csr_bankarray_csrbank0_bus_errors_w = soccontroller_bus_errors_status[31:0];
assign soccontroller_bus_errors_we = csr_bankarray_csrbank0_bus_errors_we;
assign csr_bankarray_sel = (csr_bankarray_sram_bus_adr[13:9] == 2'd2);
always @(*) begin
	csr_bankarray_sram_bus_dat_r <= 32'd0;
	if (csr_bankarray_sel_r) begin
		csr_bankarray_sram_bus_dat_r <= csr_bankarray_dat_r;
	end
end
assign csr_bankarray_adr = csr_bankarray_sram_bus_adr[4:0];
assign csr_bankarray_csrbank1_sel = (csr_bankarray_interface1_bank_bus_adr[13:9] == 3'd4);
assign csr_bankarray_csrbank1_led0_r = csr_bankarray_interface1_bank_bus_dat_w[1:0];
assign csr_bankarray_csrbank1_led0_re = ((csr_bankarray_csrbank1_sel & csr_bankarray_interface1_bank_bus_we) & (csr_bankarray_interface1_bank_bus_adr[0] == 1'd0));
assign csr_bankarray_csrbank1_led0_we = ((csr_bankarray_csrbank1_sel & (~csr_bankarray_interface1_bank_bus_we)) & (csr_bankarray_interface1_bank_bus_adr[0] == 1'd0));
assign ledstate = storage[0];
always @(*) begin
	ledpulse <= 1'd0;
	if (re) begin
		ledpulse <= storage[1];
	end
end
assign csr_bankarray_csrbank1_led0_w = storage[1:0];
assign csr_bankarray_csrbank2_sel = (csr_bankarray_interface2_bank_bus_adr[13:9] == 2'd3);
assign csr_bankarray_csrbank2_load0_r = csr_bankarray_interface2_bank_bus_dat_w[31:0];
assign csr_bankarray_csrbank2_load0_re = ((csr_bankarray_csrbank2_sel & csr_bankarray_interface2_bank_bus_we) & (csr_bankarray_interface2_bank_bus_adr[2:0] == 1'd0));
assign csr_bankarray_csrbank2_load0_we = ((csr_bankarray_csrbank2_sel & (~csr_bankarray_interface2_bank_bus_we)) & (csr_bankarray_interface2_bank_bus_adr[2:0] == 1'd0));
assign csr_bankarray_csrbank2_reload0_r = csr_bankarray_interface2_bank_bus_dat_w[31:0];
assign csr_bankarray_csrbank2_reload0_re = ((csr_bankarray_csrbank2_sel & csr_bankarray_interface2_bank_bus_we) & (csr_bankarray_interface2_bank_bus_adr[2:0] == 1'd1));
assign csr_bankarray_csrbank2_reload0_we = ((csr_bankarray_csrbank2_sel & (~csr_bankarray_interface2_bank_bus_we)) & (csr_bankarray_interface2_bank_bus_adr[2:0] == 1'd1));
assign csr_bankarray_csrbank2_en0_r = csr_bankarray_interface2_bank_bus_dat_w[0];
assign csr_bankarray_csrbank2_en0_re = ((csr_bankarray_csrbank2_sel & csr_bankarray_interface2_bank_bus_we) & (csr_bankarray_interface2_bank_bus_adr[2:0] == 2'd2));
assign csr_bankarray_csrbank2_en0_we = ((csr_bankarray_csrbank2_sel & (~csr_bankarray_interface2_bank_bus_we)) & (csr_bankarray_interface2_bank_bus_adr[2:0] == 2'd2));
assign csr_bankarray_csrbank2_update_value0_r = csr_bankarray_interface2_bank_bus_dat_w[0];
assign csr_bankarray_csrbank2_update_value0_re = ((csr_bankarray_csrbank2_sel & csr_bankarray_interface2_bank_bus_we) & (csr_bankarray_interface2_bank_bus_adr[2:0] == 2'd3));
assign csr_bankarray_csrbank2_update_value0_we = ((csr_bankarray_csrbank2_sel & (~csr_bankarray_interface2_bank_bus_we)) & (csr_bankarray_interface2_bank_bus_adr[2:0] == 2'd3));
assign csr_bankarray_csrbank2_value_r = csr_bankarray_interface2_bank_bus_dat_w[31:0];
assign csr_bankarray_csrbank2_value_re = ((csr_bankarray_csrbank2_sel & csr_bankarray_interface2_bank_bus_we) & (csr_bankarray_interface2_bank_bus_adr[2:0] == 3'd4));
assign csr_bankarray_csrbank2_value_we = ((csr_bankarray_csrbank2_sel & (~csr_bankarray_interface2_bank_bus_we)) & (csr_bankarray_interface2_bank_bus_adr[2:0] == 3'd4));
assign eventmanager_status_r = csr_bankarray_interface2_bank_bus_dat_w[0];
assign eventmanager_status_re = ((csr_bankarray_csrbank2_sel & csr_bankarray_interface2_bank_bus_we) & (csr_bankarray_interface2_bank_bus_adr[2:0] == 3'd5));
assign eventmanager_status_we = ((csr_bankarray_csrbank2_sel & (~csr_bankarray_interface2_bank_bus_we)) & (csr_bankarray_interface2_bank_bus_adr[2:0] == 3'd5));
assign eventmanager_pending_r = csr_bankarray_interface2_bank_bus_dat_w[0];
assign eventmanager_pending_re = ((csr_bankarray_csrbank2_sel & csr_bankarray_interface2_bank_bus_we) & (csr_bankarray_interface2_bank_bus_adr[2:0] == 3'd6));
assign eventmanager_pending_we = ((csr_bankarray_csrbank2_sel & (~csr_bankarray_interface2_bank_bus_we)) & (csr_bankarray_interface2_bank_bus_adr[2:0] == 3'd6));
assign csr_bankarray_csrbank2_ev_enable0_r = csr_bankarray_interface2_bank_bus_dat_w[0];
assign csr_bankarray_csrbank2_ev_enable0_re = ((csr_bankarray_csrbank2_sel & csr_bankarray_interface2_bank_bus_we) & (csr_bankarray_interface2_bank_bus_adr[2:0] == 3'd7));
assign csr_bankarray_csrbank2_ev_enable0_we = ((csr_bankarray_csrbank2_sel & (~csr_bankarray_interface2_bank_bus_we)) & (csr_bankarray_interface2_bank_bus_adr[2:0] == 3'd7));
assign csr_bankarray_csrbank2_load0_w = load_storage[31:0];
assign csr_bankarray_csrbank2_reload0_w = reload_storage[31:0];
assign csr_bankarray_csrbank2_en0_w = en_storage;
assign csr_bankarray_csrbank2_update_value0_w = update_value_storage;
assign csr_bankarray_csrbank2_value_w = value_status[31:0];
assign value_we = csr_bankarray_csrbank2_value_we;
assign csr_bankarray_csrbank2_ev_enable0_w = eventmanager_storage;
assign csr_interconnect_adr = interface_adr;
assign csr_interconnect_we = interface_we;
assign csr_interconnect_dat_w = interface_dat_w;
assign interface_dat_r = csr_interconnect_dat_r;
assign csr_bankarray_interface0_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface1_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface2_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_sram_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface0_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface1_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface2_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_sram_bus_we = csr_interconnect_we;
assign csr_bankarray_interface0_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface1_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface2_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_sram_bus_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = (((csr_bankarray_interface0_bank_bus_dat_r | csr_bankarray_interface1_bank_bus_dat_r) | csr_bankarray_interface2_bank_bus_dat_r) | csr_bankarray_sram_bus_dat_r);
always @(*) begin
	array_muxed0 <= 30'd0;
	case (grant)
		1'd0: begin
			array_muxed0 <= cpu_ibus_adr;
		end
		default: begin
			array_muxed0 <= cpu_dbus_adr;
		end
	endcase
end
always @(*) begin
	array_muxed1 <= 32'd0;
	case (grant)
		1'd0: begin
			array_muxed1 <= cpu_ibus_dat_w;
		end
		default: begin
			array_muxed1 <= cpu_dbus_dat_w;
		end
	endcase
end
always @(*) begin
	array_muxed2 <= 4'd0;
	case (grant)
		1'd0: begin
			array_muxed2 <= cpu_ibus_sel;
		end
		default: begin
			array_muxed2 <= cpu_dbus_sel;
		end
	endcase
end
always @(*) begin
	array_muxed3 <= 1'd0;
	case (grant)
		1'd0: begin
			array_muxed3 <= cpu_ibus_cyc;
		end
		default: begin
			array_muxed3 <= cpu_dbus_cyc;
		end
	endcase
end
always @(*) begin
	array_muxed4 <= 1'd0;
	case (grant)
		1'd0: begin
			array_muxed4 <= cpu_ibus_stb;
		end
		default: begin
			array_muxed4 <= cpu_dbus_stb;
		end
	endcase
end
always @(*) begin
	array_muxed5 <= 1'd0;
	case (grant)
		1'd0: begin
			array_muxed5 <= cpu_ibus_we;
		end
		default: begin
			array_muxed5 <= cpu_dbus_we;
		end
	endcase
end
always @(*) begin
	array_muxed6 <= 3'd0;
	case (grant)
		1'd0: begin
			array_muxed6 <= cpu_ibus_cti;
		end
		default: begin
			array_muxed6 <= cpu_dbus_cti;
		end
	endcase
end
always @(*) begin
	array_muxed7 <= 2'd0;
	case (grant)
		1'd0: begin
			array_muxed7 <= cpu_ibus_bte;
		end
		default: begin
			array_muxed7 <= cpu_dbus_bte;
		end
	endcase
end
assign xilinxasyncresetsynchronizerimpl = ((~locked) | reset);

always @(posedge sys_clk) begin
	if ((soccontroller_bus_errors != 32'd4294967295)) begin
		if (soccontroller_bus_error) begin
			soccontroller_bus_errors <= (soccontroller_bus_errors + 1'd1);
		end
	end
	blink_ram_bus_ack <= 1'd0;
	if (((blink_ram_bus_cyc & blink_ram_bus_stb) & (~blink_ram_bus_ack))) begin
		blink_ram_bus_ack <= 1'd1;
	end
	ram_bus_ram_bus_ack <= 1'd0;
	if (((ram_bus_ram_bus_cyc & ram_bus_ram_bus_stb) & (~ram_bus_ram_bus_ack))) begin
		ram_bus_ram_bus_ack <= 1'd1;
	end
	if (en_storage) begin
		if ((value == 1'd0)) begin
			value <= reload_storage;
		end else begin
			value <= (value - 1'd1);
		end
	end else begin
		value <= load_storage;
	end
	if (update_value_re) begin
		value_status <= value;
	end
	if (zero_clear) begin
		zero_pending <= 1'd0;
	end
	zero_old_trigger <= zero_trigger;
	if (((~zero_trigger) & zero_old_trigger)) begin
		zero_pending <= 1'd1;
	end
	state <= next_state;
	case (grant)
		1'd0: begin
			if ((~request[0])) begin
				if (request[1]) begin
					grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~request[1])) begin
				if (request[0]) begin
					grant <= 1'd0;
				end
			end
		end
	endcase
	slave_sel_r <= slave_sel;
	if (wait_1) begin
		if ((~done)) begin
			count <= (count - 1'd1);
		end
	end else begin
		count <= 20'd1000000;
	end
	csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
	if (csr_bankarray_csrbank0_sel) begin
		case (csr_bankarray_interface0_bank_bus_adr[1:0])
			1'd0: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_reset0_w;
			end
			1'd1: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_scratch0_w;
			end
			2'd2: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_bus_errors_w;
			end
		endcase
	end
	if (csr_bankarray_csrbank0_reset0_re) begin
		soccontroller_reset_storage <= csr_bankarray_csrbank0_reset0_r;
	end
	soccontroller_reset_re <= csr_bankarray_csrbank0_reset0_re;
	if (csr_bankarray_csrbank0_scratch0_re) begin
		soccontroller_scratch_storage[31:0] <= csr_bankarray_csrbank0_scratch0_r;
	end
	soccontroller_scratch_re <= csr_bankarray_csrbank0_scratch0_re;
	csr_bankarray_sel_r <= csr_bankarray_sel;
	csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
	if (csr_bankarray_csrbank1_sel) begin
		case (csr_bankarray_interface1_bank_bus_adr[0])
			1'd0: begin
				csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_led0_w;
			end
		endcase
	end
	if (csr_bankarray_csrbank1_led0_re) begin
		storage[1:0] <= csr_bankarray_csrbank1_led0_r;
	end
	re <= csr_bankarray_csrbank1_led0_re;
	csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
	if (csr_bankarray_csrbank2_sel) begin
		case (csr_bankarray_interface2_bank_bus_adr[2:0])
			1'd0: begin
				csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_load0_w;
			end
			1'd1: begin
				csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_reload0_w;
			end
			2'd2: begin
				csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_en0_w;
			end
			2'd3: begin
				csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_update_value0_w;
			end
			3'd4: begin
				csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_value_w;
			end
			3'd5: begin
				csr_bankarray_interface2_bank_bus_dat_r <= eventmanager_status_w;
			end
			3'd6: begin
				csr_bankarray_interface2_bank_bus_dat_r <= eventmanager_pending_w;
			end
			3'd7: begin
				csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_ev_enable0_w;
			end
		endcase
	end
	if (csr_bankarray_csrbank2_load0_re) begin
		load_storage[31:0] <= csr_bankarray_csrbank2_load0_r;
	end
	load_re <= csr_bankarray_csrbank2_load0_re;
	if (csr_bankarray_csrbank2_reload0_re) begin
		reload_storage[31:0] <= csr_bankarray_csrbank2_reload0_r;
	end
	reload_re <= csr_bankarray_csrbank2_reload0_re;
	if (csr_bankarray_csrbank2_en0_re) begin
		en_storage <= csr_bankarray_csrbank2_en0_r;
	end
	en_re <= csr_bankarray_csrbank2_en0_re;
	if (csr_bankarray_csrbank2_update_value0_re) begin
		update_value_storage <= csr_bankarray_csrbank2_update_value0_r;
	end
	update_value_re <= csr_bankarray_csrbank2_update_value0_re;
	if (csr_bankarray_csrbank2_ev_enable0_re) begin
		eventmanager_storage <= csr_bankarray_csrbank2_ev_enable0_r;
	end
	eventmanager_re <= csr_bankarray_csrbank2_ev_enable0_re;
	if (sys_rst) begin
		soccontroller_reset_storage <= 1'd0;
		soccontroller_reset_re <= 1'd0;
		soccontroller_scratch_storage <= 32'd305419896;
		soccontroller_scratch_re <= 1'd0;
		soccontroller_bus_errors <= 32'd0;
		blink_ram_bus_ack <= 1'd0;
		ram_bus_ram_bus_ack <= 1'd0;
		load_storage <= 32'd0;
		load_re <= 1'd0;
		reload_storage <= 32'd0;
		reload_re <= 1'd0;
		en_storage <= 1'd0;
		en_re <= 1'd0;
		update_value_storage <= 1'd0;
		update_value_re <= 1'd0;
		value_status <= 32'd0;
		zero_pending <= 1'd0;
		zero_old_trigger <= 1'd0;
		eventmanager_storage <= 1'd0;
		eventmanager_re <= 1'd0;
		value <= 32'd0;
		storage <= 2'd1;
		re <= 1'd0;
		state <= 1'd0;
		grant <= 1'd0;
		slave_sel_r <= 3'd0;
		count <= 20'd1000000;
		csr_bankarray_sel_r <= 1'd0;
	end
end

reg [31:0] mem[0:8191];
reg [31:0] memdat;
always @(posedge sys_clk) begin
	memdat <= mem[blink_adr];
end

assign blink_dat_r = memdat;

initial begin
	$readmemh("mem.init", mem);
end

reg [31:0] mem_1[0:1023];
reg [9:0] memadr;
always @(posedge sys_clk) begin
	if (ram_we[0])
		mem_1[ram_adr][7:0] <= ram_dat_w[7:0];
	if (ram_we[1])
		mem_1[ram_adr][15:8] <= ram_dat_w[15:8];
	if (ram_we[2])
		mem_1[ram_adr][23:16] <= ram_dat_w[23:16];
	if (ram_we[3])
		mem_1[ram_adr][31:24] <= ram_dat_w[31:24];
	memadr <= ram_adr;
end

assign ram_dat_r = mem_1[memadr];

initial begin
	$readmemh("mem_1.init", mem_1);
end

reg [7:0] mem_2[0:25];
reg [4:0] memadr_1;
always @(posedge sys_clk) begin
	memadr_1 <= csr_bankarray_adr;
end

assign csr_bankarray_dat_r = mem_2[memadr_1];

initial begin
	$readmemh("mem_2.init", mem_2);
end

BUFG BUFG(
	.I(clk12),
	.O(clk12_bufg)
);

BUFG BUFG_1(
	.I(clkout),
	.O(clkout_buf)
);

VexRiscv VexRiscv(
	.clk(sys_clk),
	.dBusWishbone_ACK(cpu_dbus_ack),
	.dBusWishbone_DAT_MISO(cpu_dbus_dat_r),
	.dBusWishbone_ERR(cpu_dbus_err),
	.externalInterruptArray(cpu_interrupt),
	.externalResetVector(vexriscv),
	.iBusWishbone_ACK(cpu_ibus_ack),
	.iBusWishbone_DAT_MISO(cpu_ibus_dat_r),
	.iBusWishbone_ERR(cpu_ibus_err),
	.reset((sys_rst | cpu_reset)),
	.softwareInterrupt(1'd0),
	.timerInterrupt(1'd0),
	.dBusWishbone_ADR(cpu_dbus_adr),
	.dBusWishbone_BTE(cpu_dbus_bte),
	.dBusWishbone_CTI(cpu_dbus_cti),
	.dBusWishbone_CYC(cpu_dbus_cyc),
	.dBusWishbone_DAT_MOSI(cpu_dbus_dat_w),
	.dBusWishbone_SEL(cpu_dbus_sel),
	.dBusWishbone_STB(cpu_dbus_stb),
	.dBusWishbone_WE(cpu_dbus_we),
	.iBusWishbone_ADR(cpu_ibus_adr),
	.iBusWishbone_BTE(cpu_ibus_bte),
	.iBusWishbone_CTI(cpu_ibus_cti),
	.iBusWishbone_CYC(cpu_ibus_cyc),
	.iBusWishbone_DAT_MOSI(cpu_ibus_dat_w),
	.iBusWishbone_SEL(cpu_ibus_sel),
	.iBusWishbone_STB(cpu_ibus_stb),
	.iBusWishbone_WE(cpu_ibus_we)
);

MMCME2_ADV #(
	.BANDWIDTH("OPTIMIZED"),
	.CLKFBOUT_MULT_F(7'd64),
	.CLKIN1_PERIOD(83.33333333333333),
	.CLKOUT0_DIVIDE_F(7.625),
	.CLKOUT0_PHASE(1'd0),
	.DIVCLK_DIVIDE(1'd1),
	.REF_JITTER1(0.01)
) MMCME2_ADV (
	.CLKFBIN(mmcm_fb),
	.CLKIN1(clkin),
	.RST(reset),
	.CLKFBOUT(mmcm_fb),
	.CLKOUT0(clkout),
	.LOCKED(locked)
);

(* ars_ff1 = "true", async_reg = "true" *) FDPE #(
	.INIT(1'd1)
) FDPE (
	.C(sys_clk),
	.CE(1'd1),
	.D(1'd0),
	.PRE(xilinxasyncresetsynchronizerimpl),
	.Q(xilinxasyncresetsynchronizerimpl_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *) FDPE #(
	.INIT(1'd1)
) FDPE_1 (
	.C(sys_clk),
	.CE(1'd1),
	.D(xilinxasyncresetsynchronizerimpl_rst_meta),
	.PRE(xilinxasyncresetsynchronizerimpl),
	.Q(sys_rst)
);

endmodule
